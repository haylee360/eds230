---
title: "Calibration Part 2"
author: "Haylee Oyler"
format: 
  html:
    embed-resources: true
execute:
  warning: false
  message: false
---

I am using my high flow performance metric from part 1 to come up with a Maximum Likelihood Estimate. 

```{r}
library(tidyverse)
library(here)

source(here("R/compute_highflowmetrics_all.R"))
```

```{r}
# Load data
msage = readRDS(here("Data/msage.RDS"))

# first rearrange so we can plot all results
msagel = msage %>% 
  gather(key="sim",value="str", -date, -month, -day, -year, -wy,-obs)

# apply our accurracy measure to each parameter set 
res <-  msage %>% 
  select(-date, -month, -day, -year, -wy, -obs ) %>%
  apply(2, compute_highflowmetrics_all, o = msage$obs,
              month = msage$month, year = msage$year, day = msage$day, wy = msage$wy) 

results = as.data.frame(matrix(unlist(res), byrow=T, ncol=5))
colnames(results)=c("annual_max_err","annual_max_cor", "high_month_err", "high_month_cor", "combined")

# Add results
results$sim <- msage %>% 
  select(-date, -month, -day, -year, -wy, -obs ) %>% 
  colnames()

```

```{r}
summary(results$combined)

# 1) selecting behaviorial or acceptable parameters sets

threshold <- 0.3
results_acc <- subset(results, combined > threshold)
head(results_acc)

# as an alternative  what if you want the top N parameter sets
topN <- 50
tmp <- results[order(results$combined, decreasing = T), ]
results_acc <- tmp[1:topN, ]
head(results_acc)
```

```{r}
# create a weight for each parameter set based on its relative accuracy - we do this so all weights sum to 1
max_acc <- max(results_acc$combined)
min_acc <- min(results_acc$combined)

# normalize weights
results_acc$w_acc <- (results_acc$combined - min_acc) / (max_acc - min_acc)

# make sure weights sum to one
sum_acc <- sum(results_acc$combined)
results_acc$wt_acc <- results_acc$combined / sum_acc

# look at values
summary(results_acc$wt_acc)
# check to see that they sum to one
sum(results_acc$wt_acc)

Nacc <- nrow(results_acc)
Nacc
```

```{r}
# generate streamflow as weighted average of all  acceptable parameter sets

# subset only acceptable runs
msagel_acc <- subset(msagel, sim %in% results_acc$sim)

# join with weights from res_acc, left_join will repeat weights for each day in streamflow trajectory
msagel_acc <- left_join(msagel_acc, results_acc, by = "sim")

# finally multiply flow by weight
msagel_acc <- msagel_acc %>% mutate(str_wt = str * wt_acc)

# now we can average streamflow for each day from all the runs # using the weights
aver_flow <- msagel_acc %>%
  group_by(date) %>%
  dplyr::summarize(str_mse = sum(str_wt))

# add some date information 
aver_flow <- left_join(aver_flow, msage[, c("date", "month", "year", "day", "wy", "obs")],
  by = c("date")
)

# plot
aver_flowl = aver_flow %>% pivot_longer(
  cols = c(str_mse, obs),
  values_to = "str", names_to = "type"
)
```

```{r}
ggplot(aver_flowl, aes(x = date, y = str, col=type)) +
  geom_line() +
  labs(title = "Observations and MLE over time",
       y = "Streamflow (mm/day)",
       x = "Time (years)") +
  theme_minimal()

# add some of the other date info and plot a subset
wycheck <- 1985
ggplot(subset(aver_flowl, wy == wycheck), aes(x = date, y = str, col=type)) +  
  labs(title = "Observations and MLE over time during 1985 check year",
       y = "Streamflow (mm/day)",
       x = "Time (years)") +
  geom_line() +
  theme_minimal()
```

```{r}
# we could also calculate mse for May flow
# get monthly flow

# summarize monthly flow
msagel_month <- msagel %>%
  group_by(month, wy, sim) %>%
  dplyr::summarize(str = sum(str), obs = sum(obs))

# extract only acceptable runs
msagel_acc_month <- subset(msagel_month, sim %in% results_acc$sim)

# join with weights from res_acc, left_join will repeat weights for each month in streamflow trajectory
msagel_acc_month <- left_join(msagel_acc_month, results_acc, by = "sim")


# now MSE for monthly flow
mse_flow <- msagel_acc_month %>%  
  group_by(wy, month) %>%
  dplyr::summarize(str_mse = sum(str*wt_acc), obs = mean(obs))

# For comparison, compute MSE for all simulations
mse_flow_all <- msagel_month %>%
  group_by(wy, month) %>%
  dplyr::summarize(str_mse = mean(str))

mse_flow_all = left_join(mse_flow_all, mse_flow, by = c("wy", "month"), suffix = c("_all", "_mse"))

# see the impact of calibration
tmp = mse_flow_all %>% subset(month == 5) 
may_mse_cor_all <- cor(tmp$str_mse_all, tmp$obs)
may_mse_cor <- cor(tmp$str_mse_mse, tmp$obs)

print(paste0("May Correlation between MLE and Observations: ", round(may_mse_cor, 4)))
print(paste0("May Correlation between All Simulations MLE and Observations: ", round(may_mse_cor_all, 4)))
# but what about across all months
month_mse_cor_all <- cor(mse_flow_all$str_mse_all, mse_flow_all$obs)
month_mse_cor <- cor(mse_flow_all$str_mse_mse, mse_flow_all$obs)

print(paste0("All Months Correlation between MLE and Observations: ", round(month_mse_cor, 4)))
print(paste0("All Months Correlation between All Simulations MLE and Observations: ", round(month_mse_cor_all, 4)))
```

```{r}
# Plot results
p1 <- ggplot(subset(msagel_acc_month, month == 5), aes(wy, str, group = wy)) +
  geom_boxplot(position = "dodge") +
  geom_point(aes(wy, obs), col = "red") +
  labs(title = "Stream Flow in High-Flow Month of May Over Time",
       y = "Streamflow", 
       x = "Date")

p1 + geom_point(data = subset(mse_flow, month == 5), aes(wy, str_mse), col="blue") 

```





