---
title: "Calibration"
author: "Haylee Oyler"
format: 
  html:
    embed-resources: true
execute:
  warning: false
  message: false
---

I've decided to use high flow as my new metric!

```{r}
library(tidyverse)
library(here)

source(here("R/compute_highflowmetrics.R"))
```

```{r}
# Read in data
msage = readRDS(here("Data/msage.RDS"))

# Rearrange to plot all results
msagel = msage %>% gather(key="run",value="str", -date, -month, -day, -year, -wy,-obs)

ggplot(msagel) +
    geom_line(aes(x = month, y = obs))
```

While low flow is at a minimum in august and september, high flow seems to peak in May and June. Let's compute high flow metrics for May. 

```{r}
# another example using our low flow statistics
# use apply to compute for all the data
res = msage %>% select(-date, -month, -day, -year, -wy, -obs ) %>% 
  apply(2,FUN = compute_highflowmetrics, o = msage$obs, month = msage$month, 
        day = msage$day, year = msage$year, wy = msage$wy)

# extract information from the list
results = as.data.frame(matrix(unlist(res), byrow=T, ncol=4))
colnames(results)=c("annual_max_err","annual_max_cor", "high_month_err",
              "high_month_cor")

# graph range of performance measures
resultsl = results %>% gather(key="metric",value="value")

ggplot(resultsl, aes(metric, value)) + 
  geom_boxplot() + 
  facet_wrap(~metric, scales="free")
```


```{r}
# Find parameter set with greatest high flow month correlation
best_par2 = which.max(results$high_month_cor)
best_par2
```

```{r}
# Find a range of acceptable values
summary(results)
```
We will use the summary stats here to pick a threshold for acceptability.
```{r}
# Add parameter set IDs
ID = msage %>% 
  select(-date, -month, -day, -year, -wy, -obs ) %>%  
  colnames()

results$id = ID

# Select best parameters based on summary statistics
accept_par = subset(results, annual_max_cor > 0.8 & high_month_cor > 0.8 & abs(annual_max_err < 2.9) & abs(high_month_err) < 7.6)
nrow(accept_par)

#  plot these to compare with all parameters
msagel$accept = ifelse(msagel$run %in% accept_par$id, TRUE, FALSE)
ggplot(subset(msagel, accept), aes(as.Date(date), str)) + 
  geom_line()

# or with observed but focus on may flow
msagel_mth = msagel %>% select(-date,-day) %>%  
  group_by(month, wy, run, accept) %>% 
  summarise(str = mean(str, na.rm = T), obs = mean(obs, na.rm = T))

# Only May flow
ggplot(subset(msagel_mth,  month == 5 & accept),
       aes(wy, str, group=wy)) + 
  geom_boxplot(position="dodge") +
  geom_point(aes(wy, obs), col = "red") + 
  labs(y="Streamflow", 
       x="Date")

# Calculate the mean may value for plotting
mean_may_obs = mean(subset(msagel_mth, month == 5)$obs) 

ggplot(subset(msagel_mth, month == 5), aes(accept, str)) + 
  geom_boxplot() +
  geom_hline(yintercept = mean_may_obs, col = "red") + 
  labs(y="Streamflow", 
       x="Date")
```

